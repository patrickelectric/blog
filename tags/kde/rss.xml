<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Patrick Jos√© Pereira</title>
        <link>https://patrickelectric.work</link>
        <description>I am an Electronics Engineer that works with robotic systems, OSS and OSH.</description>
        <generator>Zola</generator>
        <language>en</language>
        <atom:link href="https://patrickelectric.work/tags/kde/rss.xml" rel="self" type="application/rss+xml"/>
        <lastBuildDate>Mon, 03 Aug 2020 18:59:39 +0000</lastBuildDate>
        
            <item>
                <title>QML Online - Can be everywhere!</title>
                <pubDate>Mon, 03 Aug 2020 18:59:39 +0000</pubDate>
                <link>https://patrickelectric.work/blog/2020/qmlonline-can-be-everywhere/</link>
                <guid>https://patrickelectric.work/blog/2020/qmlonline-can-be-everywhere/</guid>
                <description>&lt;p&gt;A new feature of QML Online is already available, allows it to run in any site&#x2F;blog with minimal js&#x2F;html code!&lt;&#x2F;p&gt;
&lt;p&gt;Hopefully, our experience with QML examples, tutorials and documentation should change in the near future.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;Ff you don&#x27;t know what &lt;a href=&quot;https:&#x2F;&#x2F;qmlonline.kde.org&#x2F;&quot;&gt;QML Online&lt;&#x2F;a&gt; is, please take a look in my previous posts:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;..&#x2F;qmlonline-first-version&quot;&gt;QML Online - First version&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;..&#x2F;qmlonline-a-new-home&quot;&gt;QML Online - QML Online - A new home!&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;what-are-we-talking-about&quot;&gt;What are we talking about ?&lt;&#x2F;h1&gt;
&lt;p&gt;QML Online now can be used in any blog or website without much work, like this:&lt;&#x2F;p&gt;
&lt;script type=&quot;text&#x2F;javascript&quot; src=&quot;https:&#x2F;&#x2F;qmlonline.kde.org&#x2F;qtloader.js&quot;&gt;&lt;&#x2F;script&gt;
&lt;script type=&quot;text&#x2F;javascript&quot; src=&quot;https:&#x2F;&#x2F;qmlonline.kde.org&#x2F;qml.js&quot;&gt;&lt;&#x2F;script&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;QtQuick &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2.7
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;QtQuick&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.Controls &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2.3
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;QtQuick&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.Layouts &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1.12
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Rectangle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;{
    color: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;#179AF3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;anchors&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.fill: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;parent
     ColumnLayout&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;{
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;anchors&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.bottom: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;parent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.bottom
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;anchors&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.right: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;parent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.right
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;CheckBox &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;{
            checked: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;text: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Check this!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;
        }
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;CheckBox &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;{
            text: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Or this!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;
        }
    }
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Text &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;{
        text: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;KDE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;font&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.pixelSize: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;80
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;font&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.bold: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;color: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;#82CB38&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;anchors&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.centerIn: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;parent
        RotationAnimator on rotation &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;{
            running: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;loops: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Animation&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.Infinite
            from: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;to: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;360
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;duration: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1500
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;}
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;!--
&lt;script type=&quot;text&#x2F;javascript&quot; src=&quot;https:&#x2F;&#x2F;qmlonline.kde.org&#x2F;qtloader.js&quot;&gt;&lt;&#x2F;script&gt;
&lt;script type=&quot;text&#x2F;javascript&quot; src=&quot;https:&#x2F;&#x2F;qmlonline.kde.org&#x2F;qml.js&quot;&gt;&lt;&#x2F;script&gt;
--&gt;
&lt;div id=&quot;qmlonline&quot;&gt;&lt;&#x2F;div&gt;
&lt;script type=&#x27;text&#x2F;javascript&#x27;&gt;
    const qmlonline = new QmlOnline(&quot;qmlonline&quot;)
    qmlonline.registerCall({
        qmlMessage: function(msg) {
            console.log(`qml message: ${msg}`)
        },
        qmlError: function(data) {
            console.log(`qml message: ${JSON.stringify(msg)}`)
        },
        posInit: function() {
            qmlonline.setCode(`import QtQuick 2.7
import QtQuick.Controls 2.3
import QtQuick.Layouts 1.12
Rectangle {
    color: &quot;#179AF3&quot;
    anchors.fill: parent
     ColumnLayout{
        anchors.bottom: parent.bottom
        anchors.right: parent.right
        CheckBox {
            checked: true
            text: &quot;Check this!&quot;
        }
        CheckBox {
            text: &quot;Or this!&quot;
        }
    }
    Text {
        text: &quot;KDE&quot;
        font.pixelSize: 80
        font.bold: true
        color: &quot;#82CB38&quot;
        anchors.centerIn: parent
        RotationAnimator on rotation {
            running: true
            loops: Animation.Infinite
            from: 0
            to: 360
            duration: 1500
        }
    }
}`)
        },
    })
    qmlonline.init()
&lt;&#x2F;script&gt;
&lt;p&gt;And how can this new feature be used ?&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s quite simple, check this minimal HTML example:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;gt;
&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;head&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;gt;
    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;gt;Qml Online minimal example&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;gt;
&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;head&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;gt;
&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;gt;
    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;text&#x2F;javascript&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;src&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;qmlonline.kde.org&#x2F;qtloader.js&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;gt;
    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;text&#x2F;javascript&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;src&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;qmlonline.kde.org&#x2F;qml.js&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;gt;

    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;qmlonline&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;gt;

    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;=&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;text&#x2F;javascript&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;#39;&amp;gt;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;qml &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;QmlOnline&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;qmlonline&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;)
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;qml&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;registerCall&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;({
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;qmlMessage&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(msg) {
                console.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;qml message: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;msg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;}`)
            },
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;qmlError&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(data) {
                console.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;qml error: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;JSON&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stringify&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;)}`)
            },
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;posInit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;() {
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;qml&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setCode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;
                    import QtQuick 2.7
                    import QtQuick.Controls 2.3
                    Rectangle {
                        color: &amp;quot;#179AF3&amp;quot;
                        anchors.fill: parent
                        Text {
                            text: &amp;quot;KDE&amp;quot;
                            font.pixelSize: 80
                            font.bold: true
                            color: &amp;quot;#82CB38&amp;quot;
                            anchors.centerIn: parent
                            RotationAnimator on rotation {
                                running: true
                                loops: Animation.Infinite
                                from: 0
                                to: 360
                                duration: 1500
                            }
                        }
                    }
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;`)
            },
        })
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;qml&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;init&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;()
    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;gt;
&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;gt;
&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As you can see, there is three steps, include both &lt;code&gt;qtloader.js&lt;&#x2F;code&gt; and &lt;code&gt;qml.js&lt;&#x2F;code&gt;, add a &lt;code&gt;div&lt;&#x2F;code&gt; DOM and create a &lt;code&gt;QmlOnline&lt;&#x2F;code&gt; object.
Since I&#x27;m not a web expert, probably there is a better way to organize this approach for the user and bugs may exist.
Be free to create &lt;a href=&quot;https:&#x2F;&#x2F;invent.kde.org&#x2F;webapps&#x2F;qmlonline&#x2F;-&#x2F;merge_requests&quot;&gt;Merge Requests&lt;&#x2F;a&gt;, or get in touch with &lt;a href=&quot;https:&#x2F;&#x2F;invent.kde.org&#x2F;webapps&#x2F;qmlonline&#x2F;-&#x2F;issues&#x2F;new&quot;&gt;feature requests and issues&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;what-is-next&quot;&gt;What is next ?&lt;&#x2F;h1&gt;
&lt;p&gt;From my planned objectives, sharing QML Online as library to be available for any website was one of the final points, the only one that&#x27;s still missing is the Kirigami support, that&#x27;s still in progress and hopefully will be finished until the end of the year (if everything goes fine).&lt;&#x2F;p&gt;
&lt;p&gt;There is also a small bug, where &lt;a href=&quot;https:&#x2F;&#x2F;invent.kde.org&#x2F;webapps&#x2F;qmlonline&#x2F;-&#x2F;issues&#x2F;3&quot;&gt;it&#x27;s not possible to use multiple QML Online instances on the same webpage&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>QML Online - A new home!</title>
                <pubDate>Tue, 16 Jun 2020 13:55:39 +0000</pubDate>
                <link>https://patrickelectric.work/blog/2020/qmlonline-a-new-home/</link>
                <guid>https://patrickelectric.work/blog/2020/qmlonline-a-new-home/</guid>
                <description>&lt;p&gt;A quick update, QML Online now has a new home!&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Website: &lt;a href=&quot;http:&#x2F;&#x2F;qmlonline.kde.org&#x2F;&quot;&gt;qmlonline.kde.org&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Repository: &lt;a href=&quot;https:&#x2F;&#x2F;invent.kde.org&#x2F;webapps&#x2F;qmlonline&quot;&gt;invent.kde.org&#x2F;webapps&#x2F;qmlonline&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h1 id=&quot;what-is-next&quot;&gt;What is next&lt;&#x2F;h1&gt;
&lt;p&gt;Now that the project is under KDE organization, I&#x27;ll start with the planned new capabilities, such as the Kirigami support and the html element to help with online documentation of qml snippets.&lt;&#x2F;p&gt;
&lt;p&gt;And to finish this quick update, be invited to help with the project and send &lt;a href=&quot;https:&#x2F;&#x2F;invent.kde.org&#x2F;webapps&#x2F;qmlonline&#x2F;-&#x2F;merge_requests&quot;&gt;Merge Requests&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;invent.kde.org&#x2F;webapps&#x2F;qmlonline&#x2F;-&#x2F;issues&#x2F;new&quot;&gt;feature requests and opinions&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;assets&#x2F;konqi.png&quot; alt=&quot;image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>QML Online - First stable version!</title>
                <pubDate>Wed, 20 May 2020 00:00:00 +0000</pubDate>
                <link>https://patrickelectric.work/blog/2020/qmlonline-first-version/</link>
                <guid>https://patrickelectric.work/blog/2020/qmlonline-first-version/</guid>
                <description>&lt;p&gt;Finally, after working since October and learning a bunch about &lt;a href=&quot;https:&#x2F;&#x2F;webassembly.org&#x2F;&quot;&gt;WebAssembly&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Cascading_Style_Sheets&quot;&gt;CSS&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;wikipedia.org&#x2F;wiki&#x2F;HTML&quot;&gt;HTML&lt;&#x2F;a&gt; (sad, right ?) and &lt;a href=&quot;https:&#x2F;&#x2F;emscripten.org&#x2F;&quot;&gt;emscripten&lt;&#x2F;a&gt;, I can happily announce a stable version of &lt;a href=&quot;https:&#x2F;&#x2F;patrickelectric.work&#x2F;qmlonline&#x2F;&quot;&gt;qmlonline&lt;&#x2F;a&gt;!
In this post, I&#x27;m going to show the idea behind the project and some code that may help you with your future adventures.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h1 id=&quot;the-initial-steps&quot;&gt;The initial steps&lt;&#x2F;h1&gt;
&lt;p&gt;Everything starts with &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;patrickelectric&#x2F;qhot&quot;&gt;QHot&lt;&#x2F;a&gt;, that I describe as &lt;em&gt;&amp;quot;Hot reload for nested QML files&amp;quot;&lt;&#x2F;em&gt;, a useful tool for anyone that likes to prototype UI elements or ideas with a real-time feedback of what you are typing in QML. I noticed that compiling the project or recalling qml&#x2F;qmlscene tools just to test and check my ideas was pretty annoying and time-consuming, the desire to have something like &lt;a href=&quot;https:&#x2F;&#x2F;godbolt.org&#x2F;&quot;&gt;godbolt&lt;&#x2F;a&gt; or &lt;a href=&quot;http:&#x2F;&#x2F;quick-bench.com&#x2F;&quot;&gt;quick-bench&lt;&#x2F;a&gt; started growing. My objective was something that was closer to these tools but for QML development, and that is how &lt;strong&gt;QHot&lt;&#x2F;strong&gt; was born.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;patrickelectric&#x2F;qhot&#x2F;master&#x2F;doc&#x2F;example.gif&quot; alt=&quot;image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;With QHot working, I started to add some small features in the command line interface to have mostly of the functionalities that exist in qml&#x2F;qmlscene, at least the most important ones for my use.&lt;&#x2F;p&gt;
&lt;p&gt;After some days, the idea of &lt;strong&gt;QHot&lt;&#x2F;strong&gt; working in the browser via webassembly started to grow, and with that, the initial work that would result in &lt;strong&gt;qmlonline&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;journey&quot;&gt;Journey&lt;&#x2F;h1&gt;
&lt;p&gt;After some tweaks around &lt;strong&gt;QHot&lt;&#x2F;strong&gt;, it was possible to have the first version of qmlonline working.
The initial version was entirely made with QML, without HTML components, the editor was a &lt;a href=&quot;https:&#x2F;&#x2F;doc.qt.io&#x2F;qt-5&#x2F;qml-qtquick-textedit.html&quot;&gt;TextEdit&lt;&#x2F;a&gt; with a fancy &lt;a href=&quot;https:&#x2F;&#x2F;doc.qt.io&#x2F;qt-5&#x2F;qsyntaxhighlighter.html&quot;&gt;QSyntaxHighlighter&lt;&#x2F;a&gt;. The text inside the &lt;strong&gt;TextEdit&lt;&#x2F;strong&gt; was used to create a new component with &lt;a href=&quot;https:&#x2F;&#x2F;doc.qt.io&#x2F;qt-5&#x2F;qml-qtqml-qt.html#createQmlObject-method&quot;&gt;Qt.createQmlObject&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;assets&#x2F;qmlonline-first-version&#x2F;full-qml.png&quot; alt=&quot;image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;With the initial version working, I started to move the interface to HTML, this was necessary to have a better shortcut handling system and a better integration with the browser for user inputs.&lt;&#x2F;p&gt;
&lt;p&gt;The code evolved from a simple &lt;strong&gt;TextEdit&lt;&#x2F;strong&gt; with some controls to a full HTML interface, for that, functions had to be imlpemented to help with the webassembly code to be accessible from the webpage.&lt;&#x2F;p&gt;
&lt;p&gt;From the beginning, I had an initial singleton class called &lt;strong&gt;Util&lt;&#x2F;strong&gt; that was conceived to be some kind of helper class for the QML code. This same class was used to create the interface between the JS and the webassembly via emscripten.&lt;&#x2F;p&gt;
&lt;p&gt;In general, two functions were created, &lt;code&gt;std::string Util::codeEMS() const&lt;&#x2F;code&gt; that returns the code that is being used in the QML to render the user component, and &lt;code&gt;void Util::setCodeEMS(const std::string&amp;amp; code)&lt;&#x2F;code&gt; that sets the code that should be rendered.
To access both functions and the class, &lt;a href=&quot;https:&#x2F;&#x2F;emscripten.org&#x2F;docs&#x2F;porting&#x2F;connecting_cpp_and_javascript&#x2F;embind.html&quot;&gt;EMSCRIPTEN_BINDINGS&lt;&#x2F;a&gt; were used.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;emscripten&#x2F;bind.h&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;gt;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;EMSCRIPTEN_BINDINGS&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(util) {
    emscripten::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;class_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;lt;Util&amp;gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Util&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;)
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;code&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, &amp;amp;Util::codeEMS)
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;setCode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, &amp;amp;Util::setCodeEMS);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;emscripten::function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, &amp;amp;Util::self, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;emscripten::allow_raw_pointers&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;());
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That&#x27;s probably the most important piece of code to do the integration between the C++ and JS.&lt;&#x2F;p&gt;
&lt;p&gt;And for the QML, well, you can check all QML here:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;import Util &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1.0

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ApplicationWindow &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;{
    id: window
    title: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;qmlonline&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;
    visible: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Connections &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;{
        target: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Util
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;onCodeChanged: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;userParentItem&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;create&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Util&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.code)
    }

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Item &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;{
        id: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;userParentItem
        anchors&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.fill: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;parent
        property &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;userItem&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null

        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;create&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(textComponent) {
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;userItem&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;) {
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;userItem&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;destroy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;()
            }
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;userItem &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Qt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;createQmlObject&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;textComponent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;userParentItem&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;userItem&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;)
        }

        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Component&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.onCompleted: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;userParentItem&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;create&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Util&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.code)
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Oh, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;patrickelectric&#x2F;qmlonline&#x2F;blob&#x2F;71342f68f5f99dcf9c2b69051b63ea2e83010ca8&#x2F;src&#x2F;util.cpp&quot;&gt;you can check the source code here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;To build the project, I changed my approach a couple of times.
For the first test version, I did my development based in the official documents for &lt;a href=&quot;https:&#x2F;&#x2F;doc.qt.io&#x2F;qt-5&#x2F;wasm.html&quot;&gt;Qt webassembly&lt;&#x2F;a&gt;. But, compiling Qt for each machine that I use was a bit of a pain, so I started to use a docker available from this &lt;a href=&quot;https:&#x2F;&#x2F;www.qt.io&#x2F;blog&#x2F;2019&#x2F;03&#x2F;05&#x2F;using-docker-test-qt-webassembly&quot;&gt;Qt blog post&lt;&#x2F;a&gt;.
And everything was great until newer versions of Qt and emscript were released, and after some time searching, I found this great &lt;a href=&quot;https:&#x2F;&#x2F;hub.docker.com&#x2F;r&#x2F;madmanfred&#x2F;qt-webassembly&#x2F;tags&quot;&gt;repository&#x2F;developer&lt;&#x2F;a&gt; with a couple of Qt containers for webassembly and different emscript versions.&lt;&#x2F;p&gt;
&lt;p&gt;And after building the project, you can always test it with &lt;code&gt;python3 -m http.server&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;where-i-am&quot;&gt;Where I am&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;assets&#x2F;qmlonline-first-version&#x2F;final-version.gif&quot; alt=&quot;image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;As you can see from the gif, the basic functionality is still the same from the original version, that was full QML.&lt;&#x2F;p&gt;
&lt;p&gt;The user experience has improved, the interface is now much smoother compared to the full QML version. Qt webassembly is great, but from my tests, the performance was not good and the browser&#x2F;system integration needs improvement to have the same functionality as a normal webpage or application.&lt;&#x2F;p&gt;
&lt;p&gt;Again, remember to check &lt;a href=&quot;https:&#x2F;&#x2F;patrickelectric.work&#x2F;qmlonline&#x2F;&quot;&gt;qmlonline&lt;&#x2F;a&gt; in your browser :)&lt;&#x2F;p&gt;
&lt;p&gt;If you have good QML examples and wish to add those, contact me via email, or create an issue in the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;patrickelectric&#x2F;qmlonline&quot;&gt;repository&lt;&#x2F;a&gt;, or send a PR, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;patrickelectric&#x2F;qmlonline&#x2F;tree&#x2F;gh-pages&#x2F;qml&#x2F;examples&quot;&gt;it&#x27;s really simple&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;what-i-m-working-on&quot;&gt;What I&#x27;m working on&lt;&#x2F;h1&gt;
&lt;p&gt;There is a couple of things that I&#x27;m still working to improve qmlonline:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Kirigami support&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ajaxorg&#x2F;ace&#x2F;pulls?q=author%3Apatrickelectric+&quot;&gt;Better ace editor integration with QML&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;A qmlonline element to integrate with websites like Qt&#x2F;KDE website documents&lt;&#x2F;li&gt;
&lt;li&gt;Start to move qmlonline to be a KDE project&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Any feature request will be much welcome!&lt;&#x2F;p&gt;
&lt;h1 id=&quot;thanks&quot;&gt;Thanks!&lt;&#x2F;h1&gt;
&lt;p&gt;Special thanks to Arthur Turrini, everybody in &lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;qtbrasil&quot;&gt;Qt Brasil telegram channel&lt;&#x2F;a&gt; and the KDE members, the project would not be possible without the help and inspiration provided by the developers.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>QT3D, Lines and AtCore</title>
                <pubDate>Sun, 02 Jul 2017 00:00:00 +0000</pubDate>
                <link>https://patrickelectric.work/blog/2017/qt3d-lines-atcore/</link>
                <guid>https://patrickelectric.work/blog/2017/qt3d-lines-atcore/</guid>
                <description>&lt;p&gt;After some time working with Qt3D, now Atelier project is one step closer to have a 3D viewer from the GCode and a realtime draw of printer work.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;assets&#x2F;QT3DLines&#x2F;atcore.gif&quot; alt=&quot;3D draw with lines&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;To know how Qt3D works, you can take a look in this &lt;a href=&quot;https:&#x2F;&#x2F;doc.qt.io&#x2F;qt-5&#x2F;qt3d-overview.html&quot;&gt;overview&lt;&#x2F;a&gt;. Where, working with 3D lines was a bit problematic, but I hope to help someone with this job.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;rendering&quot;&gt;Rendering&lt;&#x2F;h1&gt;
&lt;p&gt;To render, we need our mesh and the material. This simple cube have something more than 1300 lines, and if you are thinking about it, you can can handle big models like this &lt;a href=&quot;https:&#x2F;&#x2F;www.thingiverse.com&#x2F;thing:51415&quot;&gt;Dragon Head&lt;&#x2F;a&gt; with around 706000 lines in 60fps.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;assets&#x2F;QT3DLines&#x2F;dragon.png&quot; alt=&quot;dragon&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;mesh&quot;&gt;Mesh&lt;&#x2F;h3&gt;
&lt;p&gt;It&#x27;s done with a C++ code, where a 4D vector is used to perform the buffer population, the 4D is because a 3D printer have 4 dimensions in a actuation space, (X, Y, Z and E) where E is the extruder that move the filament to perform the extrusion.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#8fa1b3;&quot;&gt;LineMeshGeometry::LineMeshGeometry&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(QList&amp;lt;QVector4D&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;vertices&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, Qt3DCore::QNode *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;parent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;) :
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;Qt3DRender::QGeometry&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;parent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;)
    , &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_positionAttribute&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Qt3DRender::QAttribute&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;))
    , &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_vertexBuffer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Qt3DRender::QBuffer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(Qt3DRender::QBuffer::VertexBuffer, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;))
{
    QByteArray vertexBufferData;
    vertexBufferData.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(vertices.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;() * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;* sizeof(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;));
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;float &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;*rawVertexArray = reinterpret_cast&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;float &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;*&amp;gt;(vertexBufferData.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;());
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; idx = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const auto &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;amp;v : vertices) {
        rawVertexArray[idx++] = v.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;();
        rawVertexArray[idx++] = v.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;();
        rawVertexArray[idx++] = v.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;z&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;();
        _vertices.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;append&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(v.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;toVector3D&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;());
    }

    _vertexBuffer-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setData&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(vertexBufferData);

    _positionAttribute-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setAttributeType&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(Qt3DRender::QAttribute::VertexAttribute);
    _positionAttribute-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setBuffer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(_vertexBuffer);
    _positionAttribute-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setDataType&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(Qt3DRender::QAttribute::Float);
    _positionAttribute-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setDataSize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
    _positionAttribute-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Qt3DRender::QAttribute::defaultPositionAttributeName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;());

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;addAttribute&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(_positionAttribute);
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;LineMeshGeometry::vertexCount&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;()
{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; _vertices.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;();
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With this done, it&#x27;s possible to easy populate it with a simple class.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#8fa1b3;&quot;&gt;LineMesh::LineMesh&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(Qt3DCore::QNode *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;parent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;) :
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;Qt3DRender::QGeometryRenderer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;parent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;)
    , &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_lineMeshGeo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nullptr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;)
{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setInstanceCount&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setIndexOffset&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setFirstInstance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; This will allow the line visualization
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setPrimitiveType&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(Qt3DRender::QGeometryRenderer::LineStrip);

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; This will be visualized in qml
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;qRegisterMetaType&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;lt;QList&amp;lt;QVector4D&amp;gt; &amp;gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;QList&amp;lt;QVector4D&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;auto&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; gcode = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;GcodeTo3D&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;();
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;connect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(gcode, &amp;amp;GcodeTo3D::posFinished, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &amp;amp;LineMesh::posUpdate);
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;LineMesh::posUpdate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(QList&amp;lt;QVector4D&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pos&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;)
{
    _vertices = pos;
    _lineMeshGeo = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;LineMeshGeometry&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(_vertices, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setVertexCount&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(_lineMeshGeo-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;vertexCount&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;());
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setGeometry&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(_lineMeshGeo);
    emit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;finished&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;();
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;material-and-entity&quot;&gt;Material and Entity&lt;&#x2F;h3&gt;
&lt;p&gt;The material used in the first GIF was &lt;a href=&quot;https:&#x2F;&#x2F;doc.qt.io&#x2F;qt-5&#x2F;qml-qt3d-extras-phongmaterial.html&quot;&gt;PhongMaterial&lt;&#x2F;a&gt;, this is simple done with:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;PhongMaterial {
  id: lineMaterial
  ambient: &amp;quot;darkGreen&amp;quot;
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And in the end, the creation of an Entity.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;LineMesh {
  id: lineMesh
  enabled: true
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;Entity {
  id: lineEntity
  components: [ lineMesh, lineMaterial ]
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In the next week we plan to finish our simple 3D viwer and add it in AtCore test GUI.\
For more info about &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;kde&#x2F;atcore&quot;&gt;AtCore and Atelier click here !&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;assets&#x2F;QT3DLines&#x2F;cube2.png&quot; alt=&quot;Cube 2&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>LaKademy 2017</title>
                <pubDate>Sun, 14 May 2017 00:00:00 +0000</pubDate>
                <link>https://patrickelectric.work/blog/2017/lakademy2017/</link>
                <guid>https://patrickelectric.work/blog/2017/lakademy2017/</guid>
                <description>&lt;p&gt;It was my first participation in a KDE sprint event, the famous LaKademy (Latin-America Akademy) in Brazil, Minas Gerais - Belo Horizonte. A great experience to talk, share and learn a bit more about KDE, coffee and software development.&lt;&#x2F;p&gt;
&lt;p&gt;Next I&#x27;ll talk about some points of what I have done during the event.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h1 id=&quot;first-day&quot;&gt;First day:&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;AtCore:
&lt;ul&gt;
&lt;li&gt;Some bug corrections of the new AtCore test client, moving from QWidgets to QDockWidget.&lt;&#x2F;li&gt;
&lt;li&gt;Some patchs review.&lt;&#x2F;li&gt;
&lt;li&gt;.gitignore updates to remove .patch and .diff from project.&lt;&#x2F;li&gt;
&lt;li&gt;Update some tasks.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;KDevelop:
&lt;ul&gt;
&lt;li&gt;Solving compilation errors from &lt;code&gt;kdesrc-build --include-dependencies kdevelop&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;syntax-highlighting:
&lt;ul&gt;
&lt;li&gt;Add Arduino extensions (.ino, .pde).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Bug correction in breeze-icons, but one was already in review.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;second-day&quot;&gt;Second day:&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;babe-qt:
&lt;ul&gt;
&lt;li&gt;Code corrections and refactory.&lt;&#x2F;li&gt;
&lt;li&gt;Restore functionality of CMakeLists.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;KDevelop:
&lt;ul&gt;
&lt;li&gt;Solve some compile corrections.&lt;&#x2F;li&gt;
&lt;li&gt;Attempt to solve more compile problems with --include-dependencies.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Atcore:
&lt;ul&gt;
&lt;li&gt;Adjustments in GUI.&lt;&#x2F;li&gt;
&lt;li&gt;Update in 3D visualizer of Gcode for 3D printers.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;third-day&quot;&gt;Third day:&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;KDE
&lt;ul&gt;
&lt;li&gt;Development of a docker to help the use and development of KDE applications with the help of &lt;code&gt;kdesrc-build&lt;&#x2F;code&gt;.
&lt;ul&gt;
&lt;li&gt;Tested with AtCore, Cantor, GCompris and Kate. (&lt;a href=&quot;https:&#x2F;&#x2F;hub.docker.com&#x2F;r&#x2F;patrickelectric&#x2F;kde&#x2F;&quot;&gt;Link&lt;&#x2F;a&gt;)
&lt;ul&gt;
&lt;li&gt;It was only possible with the help of Jedi.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;assets&#x2F;LaKademy&#x2F;docker.jpg&quot; alt=&quot;Jedi&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;last-day&quot;&gt;Last day:&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;KDE
&lt;ul&gt;
&lt;li&gt;Finalization of kde&#x27;s docker.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;KDevelop
&lt;ul&gt;
&lt;li&gt;Start to work in copy-paste functionality in KDevelop popup.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;It was a event completely different of what I thought, a great experience for any developer. Maybe, next time, I can see you in LaKademy 2018 ;)&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;assets&#x2F;LaKademy&#x2F;lakademy2017.jpg&quot; alt=&quot;LaKademy2017&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>[GSoC] KDev-Embedded, OpenOCD and avrdude</title>
                <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
                <link>https://patrickelectric.work/blog/2017/kdev-embedded-openocd-and-avrdude/</link>
                <guid>https://patrickelectric.work/blog/2017/kdev-embedded-openocd-and-avrdude/</guid>
                <description>&lt;p&gt;KDev-Embedded  now have OpenOCD integration and a new interface to use avrdude in launcher.&lt;&#x2F;p&gt;
&lt;p&gt;With &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sudar&#x2F;Arduino-Makefile&quot;&gt;Arduino-Makefile&lt;&#x2F;a&gt;, it&#x27;s possible to use a makefile to perform compilation of Arduino projects. In the video one the the examples are used to shows how it is possible to use the new avrdude launcher to execute the upload process.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;video width=&quot;640&quot; height=&quot;360&quot; controls&gt;
  	&lt;source src=&quot;&#x2F;assets&#x2F;kdev_embedded_openocd&#x2F;arduino1.mp4&quot; type=&quot;video&#x2F;mp4&quot;&gt;
&lt;&#x2F;video&gt;
&lt;p&gt;In the avrdude new interface was added more KComboBox to create a more generic and configurable interface helping advanced users.&lt;&#x2F;p&gt;
&lt;p&gt;The OpenOCD support can upload the binary to an embedded plataform and launch the OpenOCD server to perform upload and debugging with GDB. The graphic interface still in development for further improvements.&lt;&#x2F;p&gt;
&lt;video width=&quot;640&quot; height=&quot;360&quot; controls&gt;
  	&lt;source src=&quot;&#x2F;assets&#x2F;kdev_embedded_openocd&#x2F;lm4f2321.mp4&quot; type=&quot;video&#x2F;mp4&quot;&gt;
&lt;&#x2F;video&gt;
&lt;p&gt;In the next steps, we are aiming the OpenOCD interface to be more friendly with basic and advanced users, and a new integration with DFU or other tool for embedded systems.&lt;&#x2F;p&gt;
&lt;p&gt;Best regards,&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>[GSoC] KDev-Embedded, workflow integration</title>
                <pubDate>Mon, 30 Jan 2017 00:00:00 +0000</pubDate>
                <link>https://patrickelectric.work/blog/2017/kdev-embedded-workflow-integration/</link>
                <guid>https://patrickelectric.work/blog/2017/kdev-embedded-workflow-integration/</guid>
                <description>&lt;p&gt;After some work in the plugin development, now the project have a strong focus in a better integration with KDevelop workflow. Until now the Board Configuration window have some simple features to perform the upload process for beginner users, it&#x27;s called by the &lt;em&gt;&lt;strong&gt;embedded&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt; submenu in the KDevelop toolbar.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;figcaption class=&quot;wp-caption-text&quot;&gt;Welcome message&lt;&#x2F;figcaption&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;assets&#x2F;kdev_embedded_workflow&#x2F;arduinowindow063.png&quot; alt=&quot;arduinowindow063&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;figcaption class=&quot;wp-caption-text&quot;&gt;Error message&lt;&#x2F;figcaption&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;assets&#x2F;kdev_embedded_workflow&#x2F;arduinowindow064.png&quot; alt=&quot;arduinowindow064&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;figcaption class=&quot;wp-caption-text&quot;&gt;Success message&lt;&#x2F;figcaption&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;assets&#x2F;kdev_embedded_workflow&#x2F;arduinowindow065.png&quot; alt=&quot;arduinowindow065&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The problem is that the Board Configuration window don&#x27;t follow the integrated workflow of KDevelop, and that&#x27;s what are we doing right now, turning the &lt;strong&gt;KDev-Embedded&lt;&#x2F;strong&gt; an integrated plugin helping programmers that already know how to use the software and how to perform what they want. That&#x27;s the idea behind the &lt;strong&gt;Embedded Launcher&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;figcaption class=&quot;wp-caption-text&quot;&gt;KDev-Embedded Embedded Launcher&lt;&#x2F;figcaption&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;assets&#x2F;kdev_embedded_workflow&#x2F;launch_config70.png&quot; alt=&quot;launch_config70&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The Embedded Launcher try to help beginners and advanced users with presets and a Board menu, until now the preset ComboBox is disabled until we finish the ARM support and the Board menu configure some others features like MCU, Interface baud rate and Arguments, but the user is free to perform modifications in this fields thanks to KComboBox. After the launcher configuration finished the user can save and execute it to perform  the upload process that shows in KDevelop output.&lt;&#x2F;p&gt;
&lt;figcaption class=&quot;wp-caption-text&quot;&gt;KDevelop output showing the programmer feedback&lt;&#x2F;figcaption&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;assets&#x2F;kdev_embedded_workflow&#x2F;Selection_074.png&quot; alt=&quot;selection074&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The plugin still in development, supporting  Arduino board and being tested only on some boards like Arduino Nano and Mini. In the next week we&#x27;ll start the ARM support.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>[GSoC] KDev-Embedded, The alpha version is coming !</title>
                <pubDate>Sun, 29 Jan 2017 00:00:00 +0000</pubDate>
                <link>https://patrickelectric.work/blog/2017/kdev-embedded-the-alpha-version-is-coming/</link>
                <guid>https://patrickelectric.work/blog/2017/kdev-embedded-the-alpha-version-is-coming/</guid>
                <description>&lt;p&gt;The GSoC plan to dominate the world of embedded system developments is near to have his first version !&lt;&#x2F;p&gt;
&lt;p&gt;Today one of the most important steps was performed, the first upload to a microController. The code was a blink compiled with a makefile and uploaded with the KDev-Embedded plugin to an AVR microController (Arduino Nano board).&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;assets&#x2F;kdev_embedded_the_alpha&#x2F;Selection_024.png&quot; alt=&quot;upload&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;With the Arduino&#x27;s support done, the plugin will have the first release version and the start of next step (ARM processors).&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>[GSoC] KDev-Embedded, Debugging and programming embedded systems</title>
                <pubDate>Sat, 28 Jan 2017 00:00:00 +0000</pubDate>
                <link>https://patrickelectric.work/blog/2017/kdev-embedded-debugging-and-programming-embedded-systems/</link>
                <guid>https://patrickelectric.work/blog/2017/kdev-embedded-debugging-and-programming-embedded-systems/</guid>
                <description>&lt;p&gt;The actual embedded system word depends on closed-source IDEs and libraries, with high monetary value and deprecated functionalities. Programmers that would like to use ARM based boards without paying for an IDE will have problems setting up such development ambient and synchronized toolkits.&lt;&#x2F;p&gt;
&lt;p&gt;The main idea of this project is to provide a plugin integrated with KDevelop to help the debugging and programming process of embedded systems like AVR, ARM and x86 based boards.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;Since 2011, starting with my electronic engineering graduation the contact with embedded system begun with PIC and ATMEL uC. In 2012 I was accepted in the ROBOTA (competition D&amp;amp;R team) and the ProVANT (Project and Development of UAV in the tilt-rotor configuration), both project working with hardware and software integration.&lt;&#x2F;p&gt;
&lt;p&gt;The development on ProVANT project showed how difficult can be to program an embedded system without using closed source software, It&#x27;s hard to find a descent IDE to develop in such area, ever harder to do it with open-source programs and tools.&lt;&#x2F;p&gt;
&lt;p&gt;But after some time I discovered &lt;a href=&quot;http:&#x2F;&#x2F;openocd.org&#x2F;&quot;&gt;OpenOCD&lt;&#x2F;a&gt; and &lt;em&gt;arm-none-eabi&lt;&#x2F;em&gt; to do my job. But it was such a pain first time to understand and use everything together but after some time everything start to progress.&lt;&#x2F;p&gt;
&lt;p&gt;Now I am at Intel doing my internship to finish my electronic engineering graduation and working on KDevelop for GSOC 2016 project to turn KDevelop into a native system to debug and program embedded systems.&lt;&#x2F;p&gt;
&lt;p&gt;Until now the plugin developed can download and install the Arduino toolkit. This part was strongly based on &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mupuf&#x2F;arduide&quot;&gt;ArduIDE&lt;&#x2F;a&gt; project for which I have contributed by updating the Arduino supported version and some corrections of the code, with a great help of Mupuf. Also a window in development to configure that board and interface to program.&lt;&#x2F;p&gt;
&lt;p&gt;The GSOC submission can be found &lt;a href=&quot;http:&#x2F;&#x2F;patrickjp.com&#x2F;wp-content&#x2F;uploads&#x2F;2016&#x2F;04&#x2F;gsoc.pdf&quot;&gt;here&lt;&#x2F;a&gt; for download.&lt;&#x2F;p&gt;
&lt;p&gt;TLDR: The focus of the project is a versatile plugin that can be used for both first travel and experienced programmers in the word of embedded systems !&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ll try to update the blog as the project progress.&lt;&#x2F;p&gt;
</description>
            </item>
        
    </channel>
</rss>